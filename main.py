#!/usr/bin/env python3# -*- coding: utf-8 -*-"""The Witcher TRPG - Windows 11 AppCompa√±ero Digital para Directores de JuegoVersi√≥n 1.1.0 - Ahora con videos de fondo"""import sysimport osfrom pathlib import Pathimport customtkinter as ctkfrom PIL import Imageimport pygameimport cv2# Importar sistema de razasfrom src.models.razas import RAZAS_DISPONIBLES, obtener_raza# Configuraci√≥n de CustomTkinterctk.set_appearance_mode("dark")ctk.set_default_color_theme("dark-blue")class AudioManager:    """Gestor de audio para la aplicaci√≥n"""        def __init__(self):        pygame.mixer.init()        self.musica_actual = None        self.volumen = 0.3        pygame.mixer.music.set_volume(self.volumen)        def reproducir_musica(self, archivo, loop=True):        """Reproduce m√∫sica de fondo"""        try:            if os.path.exists(archivo):                pygame.mixer.music.load(archivo)                pygame.mixer.music.play(-1 if loop else 0)                self.musica_actual = archivo                print(f"[Audio] Reproduciendo: {archivo}")            else:                print(f"[Audio] No encontrado: {archivo}")        except Exception as e:            print(f"[Audio] Error: {e}")        def detener_musica(self):        """Detiene la m√∫sica"""        pygame.mixer.music.stop()        def cambiar_volumen(self, volumen):        """Cambia volumen (0.0 a 1.0)"""        self.volumen = max(0.0, min(1.0, volumen))        pygame.mixer.music.set_volume(self.volumen)class TheWitcherApp(ctk.CTk):    """Aplicaci√≥n principal de The Witcher TRPG"""        def __init__(self):        super().__init__()                # Configuraci√≥n ventana        self.title("The Witcher TRPG - Compa√±ero DJ")        self.geometry("1400x900")        self.state('zoomed')  # Pantalla completa                # Variables        self.seccion_actual = None        self.audio_manager = AudioManager()        self.bg_video = None  # Variable para el video de fondo                # Configurar grid        self.grid_columnconfigure(1, weight=1)        self.grid_rowconfigure(0, weight=1)                # Crear interfaz        self.crear_menu_lateral()        self.crear_panel_principal()                # Mostrar inicio        self.mostrar_inicio()                # Iniciar m√∫sica de fondo        self.audio_manager.reproducir_musica("assets/audio/menu_principal.ogg")        def crear_menu_lateral(self):        """Crea el men√∫ lateral de navegaci√≥n"""        menu = ctk.CTkFrame(self, width=250, corner_radius=0)        menu.grid(row=0, column=0, sticky="nsew")        menu.grid_propagate(False)                # Logo/T√≠tulo        titulo = ctk.CTkLabel(            menu,             text="‚öîÔ∏è THE WITCHER\nTRPG",            font=("Arial", 24, "bold"),            text_color="#FFD700"        )        titulo.pack(pady=30)                # Botones del men√∫        botones = [            ("üè† Inicio", self.mostrar_inicio),            ("üë§ Crear Personaje", self.mostrar_crear_personaje),            ("üìñ Razas & Profesiones", self.mostrar_razas_profesiones),            ("üó°Ô∏è Equipo & Armas", self.mostrar_equipo),            ("‚ú® Magia & Hechizos", self.mostrar_magia),            ("üê∫ Bestiario", self.mostrar_bestiario),            ("üé≤ Dados & Calculadoras", self.mostrar_dados),            ("‚öôÔ∏è Configuraci√≥n", self.mostrar_configuracion),        ]                for texto, comando in botones:            btn = ctk.CTkButton(                menu,                text=texto,                command=comando,                height=45,                font=("Arial", 14),                anchor="w"            )            btn.pack(pady=5, padx=15, fill="x")                # Control de volumen        ctk.CTkLabel(menu, text="üîä Volumen", font=("Arial", 12)).pack(pady=(30, 5))        slider = ctk.CTkSlider(            menu,             from_=0,             to=1,             command=self.cambiar_volumen,            number_of_steps=100        )        slider.set(0.3)        slider.pack(pady=5, padx=15, fill="x")        def crear_panel_principal(self):        """Crea el panel principal donde se muestra el contenido"""        self.panel_principal = ctk.CTkFrame(self, corner_radius=0)        self.panel_principal.grid(row=0, column=1, sticky="nsew", padx=10, pady=10)        self.panel_principal.grid_columnconfigure(0, weight=1)        self.panel_principal.grid_rowconfigure(0, weight=1)        def limpiar_panel(self):        """Limpia el panel principal"""        # Detener video si existe        if self.bg_video:            self.bg_video.stop()            self.bg_video = None                for widget in self.panel_principal.winfo_children():            widget.destroy()        def cambiar_volumen(self, valor):        """Callback para el slider de volumen"""        self.audio_manager.cambiar_volumen(float(valor))        # ========================================================================    # SECCIONES DE LA APLICACI√ìN    # ========================================================================        def mostrar_inicio(self):        """Muestra pantalla de inicio con video de fondo"""        self.limpiar_panel()                # ========== FONDO DE VIDEO ==========        from src.utils.video_manager import VideoBackground                video_path = "assets/videos/menu_background.mp4"        if os.path.exists(video_path):            self.bg_video = VideoBackground(self.panel_principal, video_path)            self.bg_video.start()                # ========== OVERLAY OSCURO (opcional, para que el texto se vea mejor) ==========        overlay_bg = ctk.CTkFrame(            self.panel_principal,             fg_color=("#000000", "#000000")        )        overlay_bg.place(x=0, y=0, relwidth=1, relheight=1)                # ========== CONTENIDO ENCIMA DEL VIDEO ==========        frame_contenido = ctk.CTkFrame(            self.panel_principal,            fg_color="transparent"        )        frame_contenido.place(relx=0.5, rely=0.5, anchor="center")                # T√≠tulo principal        titulo = ctk.CTkLabel(            frame_contenido,            text="‚öîÔ∏è THE WITCHER TRPG ‚öîÔ∏è",            font=("Arial", 56, "bold"),            text_color="#FFD700"        )        titulo.pack(pady=50)                subtitulo = ctk.CTkLabel(            frame_contenido,            text="Compa√±ero Digital para Directores de Juego",            font=("Arial", 28),            text_color="white"        )        subtitulo.pack(pady=20)                info = ctk.CTkLabel(            frame_contenido,            text="Versi√≥n 1.1.0 - Windows 11\n\nSelecciona una opci√≥n del men√∫ lateral",            font=("Arial", 18),            text_color="#CCCCCC"        )        info.pack(pady=30)        def mostrar_crear_personaje(self):        """Sistema de creaci√≥n de personajes paso a paso"""        self.limpiar_panel()                # Cambiar m√∫sica        self.audio_manager.reproducir_musica("assets/audio/creaci√≥n_personajes.flac")                # T√≠tulo        titulo = ctk.CTkLabel(            self.panel_principal,            text="üë§ CREAR NUEVO PERSONAJE",            font=("Arial", 32, "bold")        )        titulo.pack(pady=20)                # Frame principal con scroll        scroll_frame = ctk.CTkScrollableFrame(self.panel_principal)        scroll_frame.pack(fill="both", expand=True, padx=20, pady=20)                # Paso 1: Seleccionar Raza        paso1 = ctk.CTkFrame(scroll_frame)        paso1.pack(fill="x", pady=10)                ctk.CTkLabel(            paso1,            text="PASO 1: Selecciona tu Raza",            font=("Arial", 20, "bold")        ).pack(pady=10)                # Grid de razas con im√°genes        razas_grid = ctk.CTkFrame(paso1)        razas_grid.pack(fill="x", padx=20, pady=10)                for idx, (nombre, raza) in enumerate(RAZAS_DISPONIBLES.items()):            self.crear_tarjeta_raza(razas_grid, raza, idx)        def crear_tarjeta_raza(self, parent, raza, index):        """Crea una tarjeta visual para una raza"""        # Calcular posici√≥n en grid (4 columnas)        row = index // 4        col = index % 4                frame = ctk.CTkFrame(parent, width=200, height=300)        frame.grid(row=row, column=col, padx=10, pady=10)        frame.grid_propagate(False)                # Intentar cargar imagen CON PROPORCI√ìN CORRECTA        try:            if os.path.exists(raza.ruta_imagen):                img = Image.open(raza.ruta_imagen)                                # MANTENER PROPORCI√ìN (aspect ratio)                target_width = 180                target_height = 200                                # Calcular ratio original                original_ratio = img.width / img.height                target_ratio = target_width / target_height                                if original_ratio > target_ratio:                    # Imagen m√°s ancha - ajustar por ancho                    new_width = target_width                    new_height = int(target_width / original_ratio)                else:                    # Imagen m√°s alta - ajustar por alto                    new_height = target_height                    new_width = int(target_height * original_ratio)                                # Redimensionar manteniendo calidad                img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)                                # Crear fondo negro para centrar la imagen                background = Image.new('RGB', (target_width, target_height), (20, 20, 20))                offset_x = (target_width - new_width) // 2                offset_y = (target_height - new_height) // 2                background.paste(img, (offset_x, offset_y))                                img_tk = ctk.CTkImage(                    light_image=background,                     dark_image=background,                     size=(target_width, target_height)                )                                label_img = ctk.CTkLabel(frame, image=img_tk, text="")                label_img.pack(pady=5)            else:                # Placeholder si no hay imagen                label_img = ctk.CTkLabel(frame, text="üñºÔ∏è", font=("Arial", 80))                label_img.pack(pady=5)        except Exception as e:            print(f"Error cargando imagen para {raza.nombre}: {e}")            label_img = ctk.CTkLabel(frame, text="üñºÔ∏è", font=("Arial", 80))            label_img.pack(pady=5)                # Nombre de la raza        nombre_label = ctk.CTkLabel(            frame,            text=raza.nombre,            font=("Arial", 16, "bold")        )        nombre_label.pack(pady=5)                # Bot√≥n seleccionar        btn = ctk.CTkButton(            frame,            text="Seleccionar",            command=lambda r=raza: self.seleccionar_raza(r),            fg_color="#8B4513",            hover_color="#A0522D"        )        btn.pack(pady=5)        def seleccionar_raza(self, raza):        """Callback cuando se selecciona una raza"""        print(f"Raza seleccionada: {raza.nombre}")                # Crear ventana modal con info de la raza        ventana = ctk.CTkToplevel(self)        ventana.title(f"Raza: {raza.nombre}")        ventana.geometry("600x700")                scroll = ctk.CTkScrollableFrame(ventana)        scroll.pack(fill="both", expand=True, padx=20, pady=20)                # T√≠tulo        ctk.CTkLabel(            scroll,            text=raza.nombre,            font=("Arial", 28, "bold")        ).pack(pady=10)                # Descripci√≥n        ctk.CTkLabel(            scroll,            text=raza.descripcion,            font=("Arial", 14),            wraplength=550,            justify="left"        ).pack(pady=10)                # Ventajas raciales        ctk.CTkLabel(            scroll,            text="VENTAJAS RACIALES",            font=("Arial", 18, "bold"),            text_color="#FFD700"        ).pack(pady=10)                for ventaja in raza.ventajas:            ventaja_frame = ctk.CTkFrame(scroll)            ventaja_frame.pack(fill="x", pady=5)                        ctk.CTkLabel(                ventaja_frame,                text=f"‚öîÔ∏è {ventaja.nombre}",                font=("Arial", 14, "bold")            ).pack(anchor="w", padx=10, pady=5)                        ctk.CTkLabel(                ventaja_frame,                text=ventaja.descripcion,                font=("Arial", 12),                wraplength=550,                justify="left"            ).pack(anchor="w", padx=20, pady=5)                # Restricciones        if raza.restricciones:            ctk.CTkLabel(                scroll,                text="‚ö†Ô∏è RESTRICCIONES",                font=("Arial", 16, "bold"),                text_color="#FF6347"            ).pack(pady=10)                        for rest in raza.restricciones:                ctk.CTkLabel(                    scroll,                    text=f"‚Ä¢ {rest}",                    font=("Arial", 12),                    text_color="#FF6347"                ).pack(anchor="w", padx=20)                # Bot√≥n confirmar        ctk.CTkButton(            ventana,            text="‚úÖ Confirmar y continuar",            font=("Arial", 16),            height=40,            fg_color="green",            command=ventana.destroy        ).pack(pady=20)        def mostrar_razas_profesiones(self):        """Muestra informaci√≥n de razas y profesiones"""        self.limpiar_panel()                titulo = ctk.CTkLabel(            self.panel_principal,            text="üìñ RAZAS Y PROFESIONES",            font=("Arial", 32, "bold")        )        titulo.pack(pady=20)                # Tabs        tabview = ctk.CTkTabview(self.panel_principal)        tabview.pack(fill="both", expand=True, padx=20, pady=20)                # Tab Razas        tab_razas = tabview.add("Razas")                scroll_razas = ctk.CTkScrollableFrame(tab_razas)        scroll_razas.pack(fill="both", expand=True, padx=10, pady=10)                for nombre, raza in RAZAS_DISPONIBLES.items():            frame_raza = ctk.CTkFrame(scroll_razas)            frame_raza.pack(fill="x", pady=10)                        ctk.CTkLabel(                frame_raza,                text=raza.nombre,                font=("Arial", 20, "bold"),                text_color="#FFD700"            ).pack(anchor="w", padx=10, pady=5)                        ctk.CTkLabel(                frame_raza,                text=raza.descripcion,                font=("Arial", 12),                wraplength=1200,                justify="left"            ).pack(anchor="w", padx=10, pady=5)                # Tab Profesiones        tab_prof = tabview.add("Profesiones")        ctk.CTkLabel(            tab_prof,            text="Pr√≥ximamente: Profesiones completas",            font=("Arial", 18)        ).pack(pady=50)        def mostrar_equipo(self):        """Muestra cat√°logo de equipo"""        self.limpiar_panel()        ctk.CTkLabel(            self.panel_principal,            text="üó°Ô∏è EQUIPO Y ARMAS\n\n(En desarrollo)",            font=("Arial", 32, "bold")        ).pack(expand=True)        def mostrar_magia(self):        """Muestra sistema de magia"""        self.limpiar_panel()                self.audio_manager.reproducir_musica("assets/audio/magia.flac")                ctk.CTkLabel(            self.panel_principal,            text="‚ú® MAGIA Y HECHIZOS\n\n(En desarrollo)",            font=("Arial", 32, "bold")        ).pack(expand=True)        def mostrar_bestiario(self):        """Muestra bestiario"""        self.limpiar_panel()                self.audio_manager.reproducir_musica("assets/audio/Bestiario.flac")                ctk.CTkLabel(            self.panel_principal,            text="üê∫ BESTIARIO\n\n(En desarrollo)",            font=("Arial", 32, "bold")        ).pack(expand=True)        def mostrar_dados(self):        """Muestra sistema de dados"""        self.limpiar_panel()        ctk.CTkLabel(            self.panel_principal,            text="üé≤ DADOS Y CALCULADORAS\n\n(En desarrollo)",            font=("Arial", 32, "bold")        ).pack(expand=True)        def mostrar_configuracion(self):        """Muestra configuraci√≥n"""        self.limpiar_panel()        ctk.CTkLabel(            self.panel_principal,            text="‚öôÔ∏è CONFIGURACI√ìN\n\n(En desarrollo)",            font=("Arial", 32, "bold")        ).pack(expand=True)def main():    """Funci√≥n principal"""    app = TheWitcherApp()    app.mainloop()if __name__ == "__main__":    main()