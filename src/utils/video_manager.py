#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Gestor de videos para The Witcher TRPGSoporta MP4, AVI, MOV"""import cv2import threadingfrom PIL import Imageimport customtkinter as ctkimport osclass VideoBackground:    """Video de fondo para una ventana"""        def __init__(self, parent_frame, video_path):        self.frame = parent_frame        self.video_path = video_path        self.playing = False        self.cap = None        self.thread = None                # Label que contendrá el video (capa de fondo)        self.video_label = ctk.CTkLabel(self.frame, text="")        self.video_label.place(x=0, y=0, relwidth=1, relheight=1)                # Enviar al fondo (para que otros widgets aparezcan encima)        self.video_label.lower()        def start(self):        """Inicia el video de fondo"""        if not os.path.exists(self.video_path):            print(f"[Video] No existe: {self.video_path}")            return                    if not self.playing:            self.playing = True            self.thread = threading.Thread(target=self._play_video, daemon=True)            self.thread.start()        def stop(self):        """Detiene el video"""        self.playing = False        if self.cap:            self.cap.release()        def _play_video(self):        """Bucle de reproducción (interno)"""        self.cap = cv2.VideoCapture(self.video_path)                if not self.cap.isOpened():            print(f"[Video] No se pudo abrir: {self.video_path}")            return                # Obtener FPS del video        fps = self.cap.get(cv2.CAP_PROP_FPS)        delay = int(1000 / fps) if fps > 0 else 30                while self.playing:            ret, frame = self.cap.read()                        if not ret:                # Reiniciar video (loop infinito)                self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)                continue                        try:                # Convertir BGR (OpenCV) a RGB (PIL)                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)                img = Image.fromarray(frame_rgb)                                # Redimensionar al tamaño del label                width = self.video_label.winfo_width()                height = self.video_label.winfo_height()                                if width > 1 and height > 1:                    img = img.resize((width, height), Image.Resampling.LANCZOS)                                # Convertir a formato CustomTkinter                photo = ctk.CTkImage(                    light_image=img,                    dark_image=img,                    size=(width, height)                )                                # Actualizar label                self.video_label.configure(image=photo)                self.video_label.image = photo  # Mantener referencia                                # Esperar según FPS del video                self.frame.after(delay)                            except Exception as e:                print(f"[Video] Error en frame: {e}")                break                self.cap.release()